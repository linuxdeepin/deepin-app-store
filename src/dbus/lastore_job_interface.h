/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp com.deepin.AppStore.Backend.Job.xml -p lastore_job_interface -c LastoreJobInterface -N
 *
 * qdbusxml2cpp is Copyright (C) 2016 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef LASTORE_JOB_INTERFACE_H
#define LASTORE_JOB_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.deepin.AppStore.Backend.Job
 */
class LastoreJobInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.lastore.Job"; }

public:
    LastoreJobInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~LastoreJobInterface();

    Q_PROPERTY(bool Cancelable READ cancelable)
    inline bool cancelable() const
    { return qvariant_cast< bool >(property("Cancelable")); }

    Q_PROPERTY(qlonglong CreateTime READ createTime)
    inline qlonglong createTime() const
    { return qvariant_cast< qlonglong >(property("CreateTime")); }

    Q_PROPERTY(QString Description READ description)
    inline QString description() const
    { return qvariant_cast< QString >(property("Description")); }

    Q_PROPERTY(qlonglong DownloadSize READ downloadSize)
    inline qlonglong downloadSize() const
    { return qvariant_cast< qlonglong >(property("DownloadSize")); }

    Q_PROPERTY(QString Id READ id)
    inline QString id() const
    { return qvariant_cast< QString >(property("Id")); }

    Q_PROPERTY(QString Name READ name)
    inline QString name() const
    { return qvariant_cast< QString >(property("Name")); }

    Q_PROPERTY(QStringList Packages READ packages)
    inline QStringList packages() const
    { return qvariant_cast< QStringList >(property("Packages")); }

    Q_PROPERTY(double Progress READ progress)
    inline double progress() const
    { return qvariant_cast< double >(property("Progress")); }

    Q_PROPERTY(qlonglong Speed READ speed)
    inline qlonglong speed() const
    { return qvariant_cast< qlonglong >(property("Speed")); }

    Q_PROPERTY(QString Status READ status)
    inline QString status() const
    { return qvariant_cast< QString >(property("Status")); }

    Q_PROPERTY(QString Type READ type)
    inline QString type() const
    { return qvariant_cast< QString >(property("Type")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Clean()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Clean"), argumentList);
    }

    inline QDBusPendingReply<> Pause()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Pause"), argumentList);
    }

    inline QDBusPendingReply<> Start()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Start"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

#endif
